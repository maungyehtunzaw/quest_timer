import 'dart:async';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:screenshot/screenshot.dart';
import 'package:camera/camera.dart';
import 'package:google_ml_kit/google_ml_kit.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  final cameras = await availableCameras();
  runApp(MyApp(cameras: cameras));
}

class MyApp extends StatelessWidget {
  final List<CameraDescription> cameras;

  MyApp({required this.cameras});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Timer App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: TimerScreen(cameras: cameras),
    );
  }
}

class TimerScreen extends StatefulWidget {
  final List<CameraDescription> cameras;

  TimerScreen({required this.cameras});

  @override
  _TimerScreenState createState() => _TimerScreenState();
}

class _TimerScreenState extends State<TimerScreen> {
  late CameraController _cameraController;
  List<String> faceList = []; // dynamically add face and show to right
  List<String> screenshotList =
      []; // dynamically add screenshot and show to right
  bool _isTimerRunning = false;
  String _timerText = "00:00:00";
  late Timer _timer;
  int _start = 0;
  ScreenshotController screenshotController = ScreenshotController();
  final faceDetector = GoogleMlKit.vision.faceDetector(FaceDetectorOptions(
    enableContours: true,
    enableClassification: true,
  ));
  bool isDetecting = false;

  @override
  void initState() {
    super.initState();
    startCamera();
  }

  void startCamera() {
    _cameraController =
        CameraController(widget.cameras[0], ResolutionPreset.high);
    _cameraController.initialize().then((_) {
      if (!mounted) {
        return;
      }
      setState(() {});
      startFaceDetection();
    });
  }

  void stopCamera() {
    _cameraController.dispose();
  }

  void startTimer() {
    const oneSec = Duration(seconds: 1);
    _timer = Timer.periodic(
      oneSec,
      (Timer timer) {
        if (mounted) {
          setState(() {
            _start++;
            _timerText = _formatTime(_start);
          });
        }
      },
    );
  }

  void startFaceDetection() {
    _cameraController.startImageStream((CameraImage image) async {
      if (isDetecting) return;
      isDetecting = true;
      final faces = await detectFacesFromImage(image);
      if (faces.isNotEmpty) {
        print("Face detected, capturing image...");
        await captureImage();
      }
      isDetecting = false;
    });
  }

  Future<List<Face>> detectFacesFromImage(CameraImage image) async {
    final WriteBuffer allBytes = WriteBuffer();
    for (Plane plane in image.planes) {
      allBytes.putUint8List(plane.bytes);
    }
    final bytes = allBytes.done().buffer.asUint8List();
    final Size imageSize =
        Size(image.width.toDouble(), image.height.toDouble());

    final InputImageRotation imageRotation = _rotationIntToImageRotation(
        _cameraController.description.sensorOrientation);

    final InputImage inputImage = InputImage.fromBytes(
      bytes: bytes,
      metadata: InputImageMetadata(
        rotation: imageRotation,
        size: imageSize,
        format: InputImageFormat.nv21,
        // imageRotation: imageRotation,
        bytesPerRow: 2,

        // planeData: image.planes.map(
        //   (Plane plane) {
        //     return InputImagePlaneMetadata(
        //       bytesPerRow: plane.bytesPerRow,
        //       height: plane.height,
        //       width: plane.width,
        //     );
        //   },
        // ).toList(),
      ),
    );

    final faces = await faceDetector.processImage(inputImage);
    return faces;
  }

  InputImageRotation _rotationIntToImageRotation(int rotation) {
    switch (rotation) {
      case 90:
        return InputImageRotation.rotation90deg;
      case 180:
        return InputImageRotation.rotation180deg;
      case 270:
        return InputImageRotation.rotation270deg;
      default:
        return InputImageRotation.rotation0deg;
    }
  }

  Future<void> captureImage() async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final fileName = "headshot_${DateTime.now().millisecondsSinceEpoch}.jpg";
      final filePath = "${directory.path}/$fileName";
      await _cameraController.takePicture().then((XFile? file) {
        if (file != null) {
          setState(() {
            faceList.add(file.path);
            print("Headshot saved to ${file.path}");
          });
          takeScreenshot();
        }
      });
    } catch (e) {
      print(e);
    }
  }

  void takeScreenshot() async {
    final directory = await getApplicationDocumentsDirectory();
    String fileName = "screenshot_${DateTime.now().millisecondsSinceEpoch}.png";
    String filePath = "${directory.path}/$fileName";

    screenshotController
        .captureAndSave(
      directory.path,
      fileName: fileName,
    )
        .then((String? path) {
      if (path != null) {
        setState(() {
          screenshotList.add(path);
          print("Screenshot saved to $path");
        });
      }
    });
  }

  String _formatTime(int seconds) {
    final hours = (seconds ~/ 3600).toString().padLeft(2, '0');
    final minutes = ((seconds % 3600) ~/ 60).toString().padLeft(2, '0');
    final secs = (seconds % 60).toString().padLeft(2, '0');
    return "$hours:$minutes:$secs";
  }

  @override
  void dispose() {
    _timer.cancel();
    _cameraController.dispose();
    faceDetector.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (!_cameraController.value.isInitialized) {
      return Container();
    }
    return Scaffold(
      appBar: AppBar(
        title: const Text('Timer App'),
      ),
      body: Row(
        children: [
          Expanded(
            flex: 6,
            child: Column(
              children: [
                Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(
                      _timerText,
                      style: const TextStyle(fontSize: 48),
                    ),
                    ElevatedButton(
                      onPressed: () {
                        setState(() {
                          _isTimerRunning = !_isTimerRunning;
                          if (_isTimerRunning) {
                            startTimer();
                          } else {
                            _timer.cancel();
                          }
                        });
                      },
                      child: Text(_isTimerRunning ? 'Stop' : 'Start'),
                    ),
                  ],
                ),
                Expanded(
                  child: CameraPreview(_cameraController),
                ),
              ],
            ),
          ),
          Expanded(
            flex: 2,
            child: ListView.builder(
              itemCount: faceList.length,
              itemBuilder: (context, index) {
                return Image.file(File(faceList[index]));
              },
            ),
          ),
          Expanded(
            flex: 2,
            child: ListView.builder(
              itemCount: screenshotList.length,
              itemBuilder: (context, index) {
                return Image.file(File(screenshotList[index]));
              },
            ),
          ),
        ],
      ),
    );
  }
}
